'''Implement Binary Search Tree (BST) in python.'''class Node:    def __init__(self, key):        self.key = key        self.left = None        self.right = Noneclass BinarySearchTree:    def __init__(self):        self.root = None    def insert(self, key):        if self.root is None:            self.root = Node(key)        else:            self._insert_recursive(self.root, key)    def _insert_recursive(self, node, key):        if key <= node.key:            if node.left is None:                node.left = Node(key)            else:                self._insert_recursive(node.left, key)        else:            if node.right is None:                node.right = Node(key)            else:                self._insert_recursive(node.right, key)        def search(self, key):        return self._search_recursive(self.root, key)    def _search_recursive(self, node, key):        if node is None or node.key == key:            return node        elif key <= node.key:            return self._search_recursive(node.left, key)        else:            return self._search_recursive(node.right, key)        def delete(self, key):        self.root = self._delete_recursive(self.root, key)    def _delete_recursive(self, node, key):        if node is None:            return node        if key < node.key:            node.left = self._delete_recursive(node.left, key)        elif key > node.key:            node.right = self._delete_recursive(node.right, key)        else:            if node.left is None:                return node.right            elif node.right is None:                return node.left            min_node = self._find_min(node.right)            node.key = min_node.key            node.right = self._delete_recursive(node.right, min_node.key)        return node    def sort(self):        sorted_list = []        self._sort_recursive(self.root, sorted_list)        return sorted_list    def _sort_recursive(self, node, sorted_list):        if node is not None:            self._sort_recursive(node.left, sorted_list)            sorted_list.append(node.key)            self._sort_recursive(node.right, sorted_list)    def _find_min(self, node):        current = node        while current.left:            current = current.left        return current