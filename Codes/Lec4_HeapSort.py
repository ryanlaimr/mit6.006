'''Implementation of Priority Queue / Heap and Heap Sort in Python.'''class PriorityQueue:    def __init__(self):        self.heap = []    def max_heapify(self, i):        left = 2 * i + 1        right = 2 * i + 2        largest = i        if left < len(self.heap) and self.heap[left] > self.heap[largest]:            largest = left        if right < len(self.heap) and self.heap[right] > self.heap[largest]:            largest = right        if largest != i:            self.heap[i], self.heap[largest] = self.heap[largest], self.heap[i]            self.max_heapify(largest)    def build_max_heap(self):        n = len(self.heap)        for i in range(n // 2 - 1, -1, -1):            self.max_heapify(i)    def extract_max(self):        if len(self.heap) == 0:            return None        max_val = self.heap[0]        self.heap[0] = self.heap[-1]        self.heap.pop()        self.max_heapify(0)        return max_val    def max(self):        if len(self.heap) == 0:            return None        return self.heap[0]    def insert(self, key):        self.heap.append(key)        i = len(self.heap) - 1        while i > 0 and self.heap[(i - 1) // 2] < self.heap[i]:            self.heap[i], self.heap[(i - 1) // 2] = self.heap[(i - 1) // 2], self.heap[i]            i = (i - 1) // 2def HeapSort(arr):    pq = PriorityQueue()    for num in arr:        pq.insert(num)    sorted_arr = []    while pq.max() is not None:        sorted_arr.append(pq.extract_max())    return sorted_arr[::-1]# Example usagearr = [4, 1, 7, 3, 9, 2]sorted_arr = HeapSort(arr)print(sorted_arr)